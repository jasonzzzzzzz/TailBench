#!/s/std/bin/perl -w

# <std-header style='perl' orig-src='shore'>
#
#  $Id: errors.pl,v 1.32 2010/06/08 22:29:23 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

# *************************************************************
#
# usage: <this-script> [-list listfile] [-e] [-d] filename [filename]*
#
# -e generate enums
# -d generate #defines
#
# (both -e and -d can be used)
#
# -list: generate a list of error codes instead of other outputs
#
# *************************************************************
#
# INPUT: any number of sets of error codes for software
#       layers called "name", with (unique) masks as follows:
#
#       name = mask {
#       ERRNAME Error string
#       ERRNAME Error string
#        ...
#       ERRNAME Error string
#       }
#
#  (mask can be in octal (0777777), hex (0xabcdeff) or decimal
#   notation)
#
#       If you want the error_info[] structure to be part of a class,
#       put the class name after the mask and groupname and before the open "{"
#       for the group of error messages; in that case the <name>_einfo_gen.h
#       file will look like:
#               w_error_info_t <class>::error_info[] = ...
#       If you don't do that, the name of the error_info structure will
#       have the <name> prepended, e.g.:
#               w_error_info_t <name>_error_info[] = ...
#
# *************************************************************
#
# OUTPUT:
#  for each software layer ("name"), this script creates:
#       <name>_errmsg_gen.h (-d or -e)
#       <name>_einfo_gen.h  (-e or -d)
#       <name>_einfo_bakw_gen.h (if -d option is used)
#       <name>_error_enum_gen.h (if -e option is used)
#       <name>_error_def_gen.h (if -d option is used)
#
#       name_error_gen.h  contains a static char * array, each element is
#               the error message associated with an error code
#       name_einfo_gen.h  contains a definition of a w_error_info_t array
#               for use with the w_error package.
#       name_error_gen.h  contains an enumeration for the
#               error codes , and an enum containing eERRMIN & eERRMAX
#       name_error_def_gen.h contains the #defined constants for the error
#               codes, and for minimum and maximum error codes
#
# *************************************************************

use strict;
use Getopt::Long;

sub Usage
{
    my $progname = $0;
    $progname =~ s/.*[\\\/]//;
    print STDERR <<EOF;
Usage: $progname [-d] [-e] filename...
Generate C++ code representing error information from file.
You must specify one of -d or -e
    
    -d          generate defines
    -e          generate enums
    -help|h     print this message and exit
    -list       generate list of error codes instead of other outputs
EOF
}

my %options = (d => 0, e => 0, help => 0, 'list' => '');
my @options = ("d!", "e!", "help|h", "list=s");
my $ok = GetOptions(\%options, @options);
$ok = 0 if $#options == -1;
my $d = $options{d};
my $e = $options{e};
$ok = 0 if (!$d && !$e);

if (!$ok || $options{help})  {
    Usage();
    die(!$ok);
}

my ( $list, $listfile );
$list = 0;
$list = 1, $listfile = $options{'list'}  if ( $options{'list'} ne '' );
my $timeStamp = localtime;

sub MakeStdHeader
{
    my ($fileName, $baseName) = @_;
    my $headerExclusionName = uc($baseName);
    $headerExclusionName =~ tr/A-Z0-9/_/c;
    
    my $header = <<EOF;
#ifndef $headerExclusionName
#define $headerExclusionName

/* DO NOT EDIT --- generated by $0 from $fileName
                   on $timeStamp 

<std-header orig-src='shore' genfile='true'>

SHORE -- Scalable Heterogeneous Object REpository

Copyright (c) 1994-99 Computer Sciences Department, University of
                      Wisconsin -- Madison
All Rights Reserved.

Permission to use, copy, modify and distribute this software and its
documentation is hereby granted, provided that both the copyright
notice and this permission notice appear in all copies of the
software, derivative works or modified versions, and any portions
thereof, and that both notices appear in supporting documentation.

THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
"AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

This software was developed with support by the Advanced Research
Project Agency, ARPA order number 018 (formerly 8230), monitored by
the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
Further funding for this work was provided by DARPA through
Rome Research Laboratory Contract No. F30602-97-2-0247.

*/

#include "w_defines.h"

/*  -- do not edit anything above this line --   </std-header>*/
EOF
    return $header;
}


sub GenErrorFiles
{
    my ($fileName, $baseName, $base, $groupName, $className, $d, $e, @lines) = @_;
    $className .= '::' if $className;
    $base = oct($base) if $base =~ /^0/;
    my $arrayPrefix = $className || "${baseName}_";
    my $num = 0;
    my $uBaseName = uc($baseName);
    
    my $errorMsgName = "${baseName}_errmsg_gen.h";
    my $errorInfoName = "${baseName}_einfo_gen.h";
    my $errorEnumName = "${baseName}_error_enum_gen.h";
    my $errorDefName = "${baseName}_error_def_gen.h";
    my $errorInfoBakwName = "${baseName}_einfo_bakw_gen.h";

    if ( ! $list ) {
        open MSG_OUT, ">$errorMsgName" or die "Couldn't open $errorMsgName";
        open INFO_OUT, ">$errorInfoName" or die "Couldn't open $errorInfoName";
        open ENUM_OUT, ">$errorEnumName" or die "Couldn't open $errorEnumName" if ($e);
        open DEF_OUT, ">$errorDefName" or die "Couldn't open $errorDefName" if ($d);
        open INFOBAKW_OUT, ">$errorInfoBakwName" or die "Couldn't open $errorInfoBakwName" if ($d);
        
        print MSG_OUT MakeStdHeader($fileName, $errorMsgName);
        print INFO_OUT MakeStdHeader($fileName, $errorInfoName);
        print ENUM_OUT MakeStdHeader($fileName, $errorEnumName) if ($e);
        print DEF_OUT MakeStdHeader($fileName, $errorDefName) if ($d);
        print INFOBAKW_OUT MakeStdHeader($fileName, $errorInfoBakwName) if ($d);
        
        print MSG_OUT "static char* ${baseName}_errmsg[] = {\n";
        print INFO_OUT "w_error_info_t ${arrayPrefix}error_info[] = {\n";
        print ENUM_OUT "enum {\n" if ($e);
        print INFOBAKW_OUT "w_error_info_t ${baseName}_error_info_bakw[] = {\n" if ($d);
    }
    
    foreach my $line (@lines)  {
	my ($tag, $msg);
        if ($line =~ /\s*(\S*)\s*(.*)/)  {
            ($tag, $msg) = ($1, $2);
            chomp $msg;
        }  else  {
            die "bad line $line";
        }
        my $dTag = "${uBaseName}_$tag";
        my $eTag = "$baseName$tag";
        
        if ( $list ) {
            print LIST sprintf("%s_%s = %s\n", $baseName, $tag, $num + 1);
	} else {
            print MSG_OUT sprintf("/* %-25s */ \"%s\",\n", $e ? $eTag : $dTag, $msg);
            print INFO_OUT sprintf("    { %-25s,  \"%s\"},\n", $e ? $eTag : $dTag, $msg);
            print ENUM_OUT sprintf("    %-25s = 0x%x,\n", $eTag, $base + $num) if ($e);
            print DEF_OUT sprintf("#define %-25s 0x%x\n", $dTag, $base + $num) if ($d);
            print INFOBAKW_OUT "    { $dTag, \"$dTag\" },\n" if ($d);
        }        
        $num++;
    }
    $num--;
        
    return  if ( $list );

    print MSG_OUT <<EOF;
	"dummy error code"
};

const ${baseName}_msg_size = $num;

#endif
EOF

    print INFO_OUT "\n};\n";
    print INFO_OUT <<EOF if $className;

void ${className}init_errorcodes() {
    if (!(w_error_t::insert(
        $groupName, ${className}error_info,
        ${baseName}ERRMAX - ${baseName}ERRMIN +1)) ) {
            W_FATAL(fcINTERNAL);
    }
}
EOF
    print INFO_OUT "\n\n#endif\n";

    print ENUM_OUT sprintf("    %-25s = 0x%x,\n", "${baseName}OK", 0) if ($e);
    print ENUM_OUT sprintf("    %-25s = 0x%x,\n", "${baseName}ERRMIN", $base) if ($e);
    print ENUM_OUT sprintf("    %-25s = 0x%x\n", "${baseName}ERRMAX", $base + $num) if ($e);
    print ENUM_OUT "};\n\n#endif\n" if ($e);

    print DEF_OUT sprintf("#define %-25s 0x%x\n", "${uBaseName}_OK", 0) if ($d);
    print DEF_OUT sprintf("#define %-25s 0x%x\n", "${uBaseName}_ERRMIN", $base) if ($d);
    print DEF_OUT sprintf("#define %-25s 0x%x\n", "${uBaseName}_ERRMAX", $base + $num) if ($d);
    print DEF_OUT "\n#endif\n" if ($d);
    
    print INFOBAKW_OUT "};\n\n#endif\n" if ($d);
    
    close MSG_OUT, or die "Couldn't close $errorMsgName";
    close INFO_OUT, or die "Couldn't close $errorInfoName";
    close ENUM_OUT, or die "Couldn't close $errorEnumName" if ($e);
    close DEF_OUT, or die "Couldn't close $errorDefName" if ($d);
    close INFOBAKW_OUT, or die "Couldn't close $errorInfoBakwName" if ($d);
}


sub ProcessFile
{
    my ($fileName, $d, $e) = @_;
    my ($baseName, $base, $groupName, $className, @lines);
    
    my $line;
    open INFILE, "<$fileName" or die "Couldn't open $fileName";
    while (defined($line = <INFILE>))  {
        next if $line =~ /^\s*\#/ || $line =~ /^\s*$/;
        if ($line =~ /^\s*(\S+)\s*=\s*([0-9A-Fa-fxX]+)\s*(".*")\s*(\S*)\s*{/)  {
            ($baseName, $base, $groupName, $className) = ($1, $2, $3, $4);
        }  elsif ($line =~ /^\s*}/)  {
            GenErrorFiles($fileName, $baseName, $base, $groupName, $className, $d, $e, @lines);
            undef $baseName;
            undef $base;
            undef $groupName;
            undef $className;
            undef @lines;
        }  else  {
            push @lines, $line;
        }
    }
    
    die "missing }" if defined $baseName;
}

if ( $list ) {
    open LIST, ">$listfile" or die "Couldn't open $listfile";
}
foreach my $file (@ARGV)  {
    ProcessFile($file, $d, $e);
}
close LIST  if ( $list );
