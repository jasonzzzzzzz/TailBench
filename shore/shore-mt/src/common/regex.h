/*<std-header orig-src='regex' incl-file-exclusion='REGEX_H'>

 $Id: regex.h,v 1.14.2.4 2010/03/19 22:19:19 nhall Exp $


*/

#ifndef REGEX_H
#define REGEX_H

#include "w_defines.h"

/*  -- do not edit anything above this line --   </std-header>*/

/*
Copyright 1992, 1993, 1994, 1997 Henry Spencer.  All rights reserved.
This software is not subject to any license of the American Telephone
and Telegraph Company or of the Regents of the University of California.

Permission is granted to anyone to use this software for any purpose on
any computer system, and to alter it and redistribute it, subject
to the following restrictions:

1. The author is not responsible for the consequences of use of this
   software, no matter how awful, even if they arise from flaws in it.

2. The origin of this software must not be misrepresented, either by
   explicit claim or by omission.  Since few users ever read sources,
   credits must appear in the documentation.

3. Altered versions must be plainly marked as such, and must not be
   misrepresented as being the original software.  Since few users
   ever read sources, credits must appear in the documentation.

4. This notice may not be removed or altered.

*/

/* 
  NOTICE of alterations in Spencer's regex implementation :
  The following alterations were made to Henry Spencer's regular 
  expressions implementation, in order to make it build in the
  Shore configuration scheme:

  1) the generated .ih files are no longer generated. They are
    considered "sources".  Likewise for regex.h.
  2) names were changed to w_regexex, w_regerror, etc by i
    #define statements in regex.h
  3) all the c sources were protoized and gcc warnings were 
    fixed.
  4) This entire notice was put into the .c, .ih, and .h files
*/

#define regexec w_regexec
#define regcomp w_regcomp
#define regerror w_regerror
#define regfree w_regfree


/* ========= begin header generated by ./mkh ========= */
extern "C" {

/* === regex2.h === */
/* XXX use real off_t */
typedef off_t regoff_t;
typedef struct {
    int re_magic;
    size_t re_nsub;        /* number of parenthesized subexpressions */
    const char *re_endp;    /* end pointer for REG_PEND */
    struct re_guts *re_g;    /* none of your business :-) */
} regex_t;
typedef struct {
    regoff_t rm_so;        /* start of match */
    regoff_t rm_eo;        /* end of match */
} regmatch_t;


/* === regcomp.cpp === */
extern int regcomp(regex_t *, const char *, int);
#define    REG_BASIC    0000
#define    REG_EXTENDED    0001
#define    REG_ICASE    0002
#define    REG_NOSUB    0004
#define    REG_NEWLINE    0010
#define    REG_NOSPEC    0020
#define    REG_PEND    0040
#define    REG_DUMP    0200


/* === regerror.cpp === */
#define    REG_OKAY     0
#define    REG_NOMATCH     1
#define    REG_BADPAT     2
#define    REG_ECOLLATE     3
#define    REG_ECTYPE     4
#define    REG_EESCAPE     5
#define    REG_ESUBREG     6
#define    REG_EBRACK     7
#define    REG_EPAREN     8
#define    REG_EBRACE     9
#define    REG_BADBR    10
#define    REG_ERANGE    11
#define    REG_ESPACE    12
#define    REG_BADRPT    13
#define    REG_EMPTY    14
#define    REG_ASSERT    15
#define    REG_INVARG    16
#define    REG_ATOI    255    /* convert name to number (!) */
#define    REG_ITOA    0400    /* convert number to name (!) */
extern size_t regerror(int, const regex_t *, char *, size_t);


/* === regexec.cpp === */
extern int regexec(const regex_t *, const char *, size_t, regmatch_t [], int);
#define    REG_NOTBOL    00001
#define    REG_NOTEOL    00002
#define    REG_STARTEND    00004
#define    REG_TRACE    00400    /* tracing of execution */
#define    REG_LARGE    01000    /* force large representation */
#define    REG_BACKR    02000    /* force use of backref code */


/* === regfree.cpp === */
extern void regfree(regex_t *);


}
/* ========= end header generated by ./mkh ========= */

/*<std-footer incl-file-exclusion='REGEX_H'>  -- do not edit anything below this line -- */

#endif          /*</std-footer>*/
