/*<std-header orig-src='shore'>

 $Id: vtable_sthread.cpp,v 1.15.2.7 2010/03/19 22:20:01 nhall Exp $

SHORE -- Scalable Heterogeneous Object REpository

Copyright (c) 1994-99 Computer Sciences Department, University of
                      Wisconsin -- Madison
All Rights Reserved.

Permission to use, copy, modify and distribute this software and its
documentation is hereby granted, provided that both the copyright
notice and this permission notice appear in all copies of the
software, derivative works or modified versions, and any portions
thereof, and that both notices appear in supporting documentation.

THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
"AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

This software was developed with support by the Advanced Research
Project Agency, ARPA order number 018 (formerly 8230), monitored by
the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
Further funding for this work was provided by DARPA through
Rome Research Laboratory Contract No. F30602-97-2-0247.

*/

#include "w_defines.h"

/*  -- do not edit anything above this line --   </std-header>*/

/*
 * Functions to gather info from the threads for
 * placing the info into a virtual table
 */

#include <w.h>
#include <w_debug.h>
#include <w_stream.h>
#include <cstdlib>
#include <cstring>
#include "sthread.h"
#include "sthread_stats.h"
#include "sthread_vtable_enum.h"


#ifdef EXPLICIT_TEMPLATE
template class vtable_func<sthread_t>;
#endif /* __GNUG__ */

const char *sthread_vtable_attr_names[] =
{
    "Thread id",
    "Thread name",
    "Thread status",
#include "sthread_stats_msg_gen.h"
        0
};

static vtable_names_init_t names_init(sthread_last, sthread_vtable_attr_names);

int
sthread_t::collect(vtable_t &v, bool names_too)
{

    pthread_mutex_lock(&_class_list_lock);

    // Traverse once to count the number of entries. Grot.
    int nt=0;
    {
        sthread_list_i i(*_class_list);
        while (i.next())  { nt++; }
    }

        if(names_too) nt ++;
        // nt: number of rows
        // sthread_last: number of attributes
        // names_init.max_size() : max attribute length
    if(v.init(nt, sthread_last, names_init.max_size())) return -1;

    vtable_func<sthread_t> f(v);

// TODO: REMOVE
// cerr << "collect " << __LINE__ << " " << __FILE__; v.operator<<(cerr); cerr << endl;

    if(names_too) f.insert_names();

// TODO: REMOVE
// cerr << "collect " << __LINE__ << " " << __FILE__; v.operator<<(cerr); cerr << endl;
    {
        sthread_list_i i(*_class_list);
        while (i.next())  {
            // Call the function f to fill a row of the table. 
            f(*i.curr());
// TODO: REMOVE
// cerr << "collect " << __LINE__ << " " << __FILE__; v.operator<<(cerr); cerr << endl;
        }
    }
    pthread_mutex_unlock(&_class_list_lock);

    return 0; // no error
}

#include <w_strstream.h>

/**\brief Collect into a virtual-table row the information about this thread
 * \details
 * The row attributes are described in \code "sthread_vtable_enum.h" \endcode.
 * The attributes are:
 * Thread id
 * Thread name
 * Thread status
 * + all the attributes generated by the stats Perl tool.
 */
void        
sthread_t::vtable_collect(vtable_row_t& t)  // argument MUST be named "t"
{
    /* Convert sthread info to strings: */

    t.set_int(sthread_id_attr, id);
    t.set_string(sthread_name_attr, name() );
    t.set_string(sthread_status_attr,  sthread_t::status_strings[status()]);

/* define TMP_GET_STAT to the get-stat macro for sthreads: */
#define TMP_GET_STAT(x) SthreadStats.x
#include "sthread_stats_collect_gen.cpp"
}

void 
sthread_t::vtable_collect_names(vtable_row_t &t)
{
    names_init.collect_names(t);
}

