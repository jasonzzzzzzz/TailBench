<std-header style='plain' orig-src='shore'>

 $Id: README.2PC,v 1.5.2.1 2009/10/13 22:14:33 nhall Exp $

SHORE -- Scalable Heterogeneous Object REpository

Copyright (c) 1994-99 Computer Sciences Department, University of
                      Wisconsin -- Madison
All Rights Reserved.

Permission to use, copy, modify and distribute this software and its
documentation is hereby granted, provided that both the copyright
notice and this permission notice appear in all copies of the
software, derivative works or modified versions, and any portions
thereof, and that both notices appear in supporting documentation.

THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
"AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

This software was developed with support by the Advanced Research
Project Agency, ARPA order number 018 (formerly 8230), monitored by
the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
Further funding for this work was provided by DARPA through
Rome Research Laboratory Contract No. F30602-97-2-0247.

  -- do not edit anything above this line --   </std-header>


How to run 2pc tests:

Build nameserver (in object_comm/ns)

In sm/ create a subdirectory for each subordinate.
   I name these by color (because I use different-colored windows
   to keep them straight) - e.g., pink, green, blue if I want to run
   with 3 subordinates.
   In each subdirectory, run the script setup.2pc

   mkdir pink
   cd pink
   source ../setup.pc

Start the nameserver in its own window.
   cd ssh
   ns ns_file

In each colored subdir, in its own window, run the script run.subord:
	
   cd pink
   run.subord


In ssh/ run the coordinator:

   cd ssh
   run.2pc


The coordinator's script echoes the command line for each test before
the test is run, and it prints an indication whether the test failed or
succeeded.  If it fails, you can yank and run (preferably adding the -V
option to ssh) that test alone.
You can also debug by using the scripts
    gdb.2pc
and 
    gdb.subord
respectively.  They simply run ssh under gdb with all the same 
arguments.

The coordinator script, run.2pc determines how each subordinate will
vote, whether its transaction will be read/write or readonly,
and whether it will crash, and if so, where.  This is all done
by sending messages to the subordinate ssh.
For the crash-recovery tests to work you must have built ssh
with USE_SSMTEST.  (Also, none of this will work unless you 
build with USE_COORD.)

You can skip the delay- and crash- tests by editing run.2pc.


