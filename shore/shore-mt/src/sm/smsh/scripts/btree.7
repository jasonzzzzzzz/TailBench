# <std-header style='tcl' orig-src='shore'>
#
#  $Id: btree.7,v 1.21.4.2 2009/12/14 23:57:55 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#  Test savepoint
#

#
# start up
#
source $script_dir/vol.init

set nrec 120

#
# create index and load it up 
#
sm begin_xct
set ndx [sm create_index $volid btree]
verbose created index $ndx
sm commit_xct

## dstats $ndx

if {$logging == 0} {
    # can't do rollback
    return "Logging turned off: skipping rollback"
}

sm begin_xct

#make sure empty savepoint at xct begin works
set tid [sm xct_to_tid [sm xct]]
set sp [sm save_work]
verbose tid $tid
verbose "*** " save point $sp
verbose "<no work done>"
verbose "^^^ " roll back to $sp
sm rollback_work $sp

verbose "ddd " rolled back to $sp

for {set i 1} {$i <= $nrec} {incr i; incr i} {
    verbose inserting $i
    sm create_assoc $ndx [format $short_form $i] $i
}

set scan [sm create_scan $ndx >= neg_inf <= pos_inf]
for {set i 1} {$i <= $nrec} {incr i; incr i} {
    set r [sm scan_next $scan]
    if {$r == "eof"} then {
	verbose EOF FOUND: $r
	break 
    }
    set key [string trimleft [lindex $r 0] 0]
    set el [lindex $r 1]
    verbose "$i : scanned ($key, $el)"
    assert {expr $key == $el}
    assert {expr $i == $key}
}
if [expr {$i <= $nrec}] {
    verbose assertion failure: i = $i, nrec = $nrec
    assert {expr $i > $nrec}
}
assert {expr [string compare [sm scan_next $scan] eof] == 0}
sm destroy_scan $scan

set sp [sm save_work]
verbose "*** " save point $sp

for {set i 2} {$i <= $nrec} {incr i; incr i} {
    verbose inserting $i
    sm create_assoc $ndx [format $short_form $i] $i
}

verbose "^^^" roll back to $sp
sm rollback_work $sp

set scan [sm create_scan $ndx >= neg_inf <= pos_inf]
for {set i 1} {$i <= $nrec} {incr i; incr i} {
    set r [sm scan_next $scan]
    if {$r == "eof"} then {
	verbose EOF FOUND: $r
	break 
    }
    set key [string trimleft [lindex $r 0] 0]
    set el [lindex $r 1]
    verbose "$i : scanned ($key, $el)"
    assert {expr $key == $el}
    assert {expr $i == $key}
}
if [expr {$i <= $nrec}] {
    verbose assertion failure: i = $i, nrec = $nrec
    assert {expr $i > $nrec}
}
assert {expr [string compare [sm scan_next $scan] eof] == 0}
sm destroy_scan $scan
sm destroy_index $ndx
sm commit_xct

unset ndx nrec i r el key scan sp tid

