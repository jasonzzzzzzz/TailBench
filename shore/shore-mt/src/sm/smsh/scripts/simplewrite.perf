# <std-header style='tcl' orig-src='shore'>
#
#  $Id: simplewrite.perf,v 1.11.2.5 2009/12/21 18:45:18 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#	Time writing 
#   Parameters: 
#   	        size of objects written 
#		(write size== whole object)
#		logging on or off
#
#
# NB: the first time you run this on a new volume, you will get some 
# multiple of 100 objects created; the transaction creating the last 100
# will run out of disk space and abort.  Thereafter, you must set
# the value of fid" to indicate that the file already exists.
#
#

set STARTOVER 0

if [is_set STARTOVER] {
	set fid 0
} else {
	set dont_force_reformat 1
	set fid s(1.4)
}

source $script_dir/vol.init


# set objsize [expr {8192 * 5}]
set objsize 200

#ignored for now
set logging 0

set config [sm config_info]

if {$volid == 0} {
	foreach i $smsh_device_list {
	set dev  [lindex $i 0]
	set size [lindex $i 1]
	set vol  [lindex $i 2]

	sm mount_dev $dev $vol

	set vol_list [sm list_volumes $dev]
	if { [llength $vol_list] == 0 } {
		set quota [sm get_device_quota $dev]
		verbose creating volume $vol size $size on $dev
		sm create_vol $dev $vol $size
	}

	set quota [sm get_device_quota $dev]
	set quota [sm get_volume_quota $vol]

	set vol_list [sm list_volumes $dev]
	assert {[expr [llength $vol_list] == 1]}
	assert {[expr [string compare [lindex $vol_list 0] $vol.0.0.0:0] == 0]}
	}
}
if {$volid == 0} {
	set volid [lindex [lindex $smsh_device_list 0] 2]
}

verbose mounted everything....

set volsize [lindex [sm get_volume_quota $volid] 0]
set used [lindex [sm get_volume_quota $volid] 1]
set volsize [expr {$volsize - $used} ]
# set objksize [expr {$objsize / 1024} ]
# set nobjs [expr {$volsize / $objksize} ]
# set nobjs [expr { 200000000 / $objsize } ]
set nobjs 10000
#unset objksize

set hdr "" 
set id_body_width zvec%d
set body [format $id_body_width $objsize]

# 
# create a huge file
#
if {$fid==0} {
	sm begin_xct
	set fid [sm create_file $volid tmp ]
	verbose fid=$fid
	set dummy [sm gather_stats reset]
	unset dummy
	verbose creating $nobjs objects of size $objsize 
	set total 0
	for {set i 0} {$i < $nobjs} {incr i} {
		# verbose $i
		set r($total) [sm create_rec $fid $hdr $objsize $body]
		incr total
	}
	if {$verbose_flag} {
		sm dump_locks 
	}
	sm commit_xct
	verbose done creating...
	sm gather_stats 

} 
#   clear the buffer pool, invalidate 
sm begin_xct
sm destroy_file $fid
sm force_buffers true
sm commit_xct

pstats

unset used total STARTOVER i volsize body r nobjs objsize
