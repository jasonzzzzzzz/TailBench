# <std-header style='tcl' orig-src='shore'>
#
#  $Id: bt.insert.5,v 1.13.4.1 2009/12/03 00:21:05 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
# Make a very large btree --
# see if we can get it to 3 levels
#

source $script_dir/vol.init
source $script_dir/bt.tcl

if {$logging==0} {
    echo "Logging off: script not run. "
} else {

set unique btree


set prefixa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
set prefixb bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
set prefixc ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
set keylist { aaa4000 }


# create a key list in largely random order
set k 0
for { set i 1 } { $i <= 800 } { incr i } {
    set used($i) 0
}
for { set i 1 } { $i <= 800 } { incr i } {
    set k [expr 1 + [random 800]]
    set j $prefixa$prefixb$prefixc[expr 4000 + $k]
    if {$unique == "btree" } {
	if { $used($k) == 1 } {
	   continue
	}
    }
    lappend keylist $j
    set used($k) 1
}
# add what was missed
for { set i 1 } { $i <= 800 } { incr i } {
    if { $used($i) == 0 } {
	set j $prefixa$prefixb$prefixc[expr 4000 + $i]
	lappend keylist $i
	set used($i) 1
    }
}
# verify
for { set i 1 } { $i <= 800 } { incr i } {
    assert {expr $used($i) == 1}
}

proc mkval { i e } {
    global max_btree_entry_size
    set maxsize [expr {$max_btree_entry_size / 2}]
    set res [format "%0*s" $maxsize a]
    return $res
}

source $script_dir/bt.insert.0

unset prefixa prefixb prefixc
unset keylist unique j k used
}

