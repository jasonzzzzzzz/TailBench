# <std-header style='tcl' orig-src='shore'>
#
#  $Id: alloc.10,v 1.5.4.1 2010/01/12 02:01:58 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#	Test allocation & abort of pages
#	T1: alloc R1/P1
#	T2: alloc R2/P1
#	T1: abort
#	T2: commit
#

source $script_dir/vol.init

# format for body size -- >= one page
set third [expr { $max_small_rec / 3 } ]

set third [expr { $third - 30 } ]
set hformsize ${third}

set big [expr {$max_small_rec - 30 } ]
set formsize  ${big}

echo small=$third big=$big

proc scanit { f } {
    verbose scanit $f
    set scan [sm scan_file_create $f t_cc_record]
    verbose get first record from $scan
    set pin [sm scan_file_next $scan 0]
    set i 0
    while {$pin != "NULL"} {
	set rec [sm pin_rid $pin]
	verbose rec: $rec

	set pid [sm pin_page_containing $pin 10]
	verbose byte 10 is on page $pid

	# don't unpin! 
	# sm pin_unpin $pin
	set pin [sm scan_file_next $scan 0]
	set i [expr {$i+1} ]
    }
    sm scan_file_destroy $scan

    verbose scan found $i records
}

proc t1 {} {
    global volid  f0 formsize hformsize dbf
    sm begin_xct

    verbose t1: create rec
    set r1 [sm create_rec $f0 hdr 1000 [formatlong 0 $hformsize %010d 10] ]
    verbose t1: created rec $r1 

sync
sync
    verbose t1: create rec again
    set r2 [sm create_rec $f0 hdr 1000 [formatlong 0 $hformsize %010d 10] ]
    verbose t1: created rec $r2 

sync

    verbose t1: aborting
    sm abort_xct
    verbose t1: aborted
}

proc t2 {} {
    global volid  f0 logging hformsize dbf
sync
    sm begin_xct
    verbose t2: create rec 

    set r1 [sm create_rec $f0 hdr 1000 [formatlong 0 $hformsize %010d 10] ]
    verbose t2: created rec $r1 
    set r1 [sm create_rec $f0 hdr 1000 [formatlong 0 $hformsize %010d 10] ]
    verbose t2: created rec $r1 
    set r1 [sm create_rec $f0 hdr 1000 [formatlong 0 $hformsize %010d 10] ]
    verbose t2: created rec $r1 

sync
sync
    verbose t2: committing
    sm commit_xct
    verbose t2: committed
}

sm begin_xct
set f0 [sm create_file $volid]]
verbose created file $f0
verbose creating a large record to use up first page
sm create_rec $f0 hdr 1000 [formatlong 0 $formsize %010d 10]
scanit $f0
sm commit_xct

echo "----------------------------------------------------------"
set y1 [fork_thread t1 {}]
set y2 [fork_thread t2 {}]

sync_thread $y1 
sync_thread $y2 
sync_thread $y1 
sync_thread $y2 
sync_thread $y1 
sync_thread $y2 
join_thread $y1 $y2 

echo "----------------------------------------------------------"

sm begin_xct
scanit $f0
sm destroy_file $f0
sm commit_xct

unset f0 
unset y1 y2
unset third big formsize hformsize
