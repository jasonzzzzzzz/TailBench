# <std-header style='tcl' orig-src='shore'>
#
#  $Id: lock.upgrade,v 1.16 1999/06/07 19:05:35 kupsch Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

############################################################################
#
#  This script tests lock upgrade:  
#	{ SH EX	}		on record
# 	{ IS IX SH SIX UD EX }	on file and volume
#
#  Currently, the script is not self-verifying, so the results
#  need to be looked at to see if the expected lock is set on
#  an object.
#
############################################################################
set mode1		{ SH EX }
set mode2 		{ IS IX SH SIX UD EX }
set rid			"k(s(10.0).100.200)"
set fid			"s(10.0)"
set vid			"10"

proc lockit { id locks } {
    global supremum
    global verbose_flag

    foreach i $locks {
    	foreach j $locks {
	    verbose "===== Expected lock on $id  $i + $j = $supremum($i,$j) ====="
    	    sm begin_xct
	    sm lock $id $i LONG
	    if {$verbose_flag}  { sm dump_locks }
	    verbose "------------"
	    sm lock $id $j LONG
	    if {$verbose_flag}  { sm dump_locks }

	    set mode [sm query_lock $id] 
	    verbose "verifying $mode == $supremum($i,$j)"
	    assert {expr [string compare $mode $supremum($i,$j)] == 0}
    	    sm commit_xct
	    verbose ""
	}
    }
}

verbose "TEST:\tLock Upgrade on Record and File"

verbose "\n*******  Lock Upgrade on Record  *******\n"
lockit $rid $mode1

verbose "\n*******  Lock Upgrade on File  *******\n"
lockit $fid $mode2

verbose "\n*******  Lock Upgrade on Volume  *******\n"
lockit $vid $mode2

verbose "STATUS:\tOK"

unset mode1 mode2 fid vid rid

