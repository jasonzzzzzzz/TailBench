# <std-header style='tcl' orig-src='shore'>
#
#  $Id: alloc.4,v 1.19 1999/06/07 19:05:08 kupsch Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#  Like alloc.2 but instead of scanning to destroy recs,
#  it remembers the rids and destroys the recs w/o a scan.
#
#
#	Test allocation & deallocation of pages
#

source $script_dir/vol.init

# format for body size -- >= one page
set formsize [expr { $lg_rec_page_space - 10} ]


proc t1 {} {
    global volid  f0 r0 formsize logging
    sm begin_xct
    verbose t1 xact [sm xct]
# sync
    verbose t1 creating 10 more recs ...
    for { set i 1} { $i <= 10} { incr i} {
	verbose creating t1 rec ...
	catch {sm create_rec $f0 h$i 1000 [formatlong 0 $formsize %010d $i]} j 
	if [error_is $j E_DEADLOCK] {
	   verbose Caught(a) : $j
	    if {$logging==0} {
		verbose t1 Logging off: substituting commit for abort
		sm commit_xct
	    } else {
		verbose t1 aborting...
		sm abort_xct
	    }
	   return
	}
	verbose t1 created rec $j
	# catch {dstatsnoaudit $volid} err
	# if [error_is $err E_DEADLOCK] {
	#    echo Caught(b): $err
	 #   verbose aborting...
	 #   sm abort_xct
	 #   return
# 	}
    }
    verbose t1 created 10 recs file $f0
    # verbose t1 dstatsnoaudit t1 xxx
    # catch {dstatsnoaudit $volid} err
   # might get deadlock if we continue 
   #  if [error_is $err E_DEADLOCK] {
    #    echo Caught(c): $err
     #   verbose aborting...
      #  sm abort_xct
       # return
    # }
# sync
    # verbose t1 dstatsnoaudit t1 yyy
    # catch {dstatsnoaudit $volid } err
    # if [error_is $err E_DEADLOCK] {
      #  echo Caught(d): $err
       # verbose aborting...
       # sm abort_xct
      #  return
    # }

    verbose t1 committing ...
    sm commit_xct
# sync
}
proc scanit { f } {
    set scan [sm scan_file_create $f t_cc_record]
    set pin [sm scan_file_next $scan 0]
    set i 0
    while {$pin != "NULL"} {
	verbose $pin
	set pin [sm scan_file_next $scan 0]
	set i [expr {$i+1} ]
    }
    # (could get a deadlock)
    catch { sm scan_file_destroy $scan } error
    verbose $error
    verbose scan found $i records
}
proc t2 {} {
    global volid  f0 rid logging
    sm begin_xct
    verbose t2 xact [sm xct]
    verbose t2 destroying all records (explicity, not by a scan) ...
    for { set i 1} { $i <= 10} { incr i} {
	verbose t2 sm destroy_rec $rid($i) ...
	catch { sm destroy_rec $rid($i) } error
	verbose error = $error
	verbose t2 destroyed $rid($i)
    }
    set i [expr {$i -1}]
    verbose t2 destroyed $i recs file $f0
    # might get deadlock if we continue 
   #  catch {dstatsnoaudit $volid} err
   #  verbose result of dstats is $err
    # if [error_is $err E_DEADLOCK] {
     #   echo Caught(e): $err
      #  verbose aborting...
       # return
    # }
# sync
    # verbose t2 dstatsnoaudit t2 yyy
    # catch {dstatsnoaudit $volid} err
    # if [error_is $err E_DEADLOCK] {
      #  echo Caught(f): $err
       # verbose aborting...
      #  return
   #  }
    # verbose t2 dstatsnoaudit t2 zzz
    # catch {dstatsnoaudit $volid} err
    # if [error_is $err E_DEADLOCK] {
      #  echo Caught(g): $err
       # verbose aborting...
      # return
    # }
# sync
    if {$logging==0} {
	verbose t2 Logging off: substituting commit for abort
	sm commit_xct
    } else {
	verbose t2 aborting...
	sm abort_xct
    }
# sync
}


sm begin_xct
set f0 [sm create_file $volid]]
verbose created file $f0
for { set i 1} { $i <= 10} { incr i} {
    set j [sm create_rec $f0 h$i 1000 [formatlong 0 $formsize %010d $i] ]
    set rid($i) $j
    verbose created rec $rid($i)
}
verbose created 10 recs file $f0
sm commit_xct

set y1 [fork_thread t1 {}]
set y2 [fork_thread t2 {}]


verbose sync_thread $y1 $y2
# sync_thread $y1 $y2

verbose sync_thread $y1 $y2
# sync_thread $y1 $y2

verbose sync_thread $y1 $y2
# sync_thread $y1 $y2

verbose join_thread $y1 $y2
join_thread $y1 $y2

verbose after join

sm begin_xct
scanit $f0
sm commit_xct

sm begin_xct
dstats $volid
sm destroy_file $f0
dstats $volid
sm commit_xct

unset i j f0 rid y1 y2 formsize

