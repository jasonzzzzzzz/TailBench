# <std-header style='tcl' orig-src='shore'>
#
#  $Id: alloc.8,v 1.15 1999/06/07 19:05:09 kupsch Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#  Recovery test: deallocate an extent and reallocate to another
#  store (btree) and then crash.
#  Should only need one thread for this, but in order to make it
#  crash, we need an intervening thread to insert something into
#  the btree (so that the btree pages aren't recycled on abort)
#  IN this case, when we reallocate, we want to insert it
#  into a btree, so the extent allocation is compensated
#  (withing the btree op).  Undo had better work.
# 
#  alloc.9 reallocates to another file (ok)
#

source $script_dir/vol.init

set_config_info
# format for body size -- >= one page

set formsize [expr { $lg_rec_page_space - 10} ]

set mx [expr $max_btree_entry_size - 5]
set ashort_form "A%30d"
set bshort_form "B%30d"

# minimumm size to cause the problem: > one extent's worth of pages:
set nrecs 1


#
# first simply create the files
#

sm begin_xct
set f0 [sm create_file $volid]
set f1 [sm create_index $volid btree]
verbose created files $f0 $f1

# populate file 0
for { set i 1} { $i <= $nrecs} { incr i} {
    set j [sm create_rec $f0 h$i 1000 [formatlong 0 $formsize %010d $i] ]
    set rid($i) $j
    verbose created rec $rid($i)
}
verbose created $nrecs recs file $f0
sm commit_xct

proc t1 {nrecs} {
    global rid f1 f2 logging mx
    set tab1 "	"

    sm begin_xct
    # turn off lock escalation since it causes deadlock with the sync's
    sm set_escalation_thresholds {0 0 0}
    set tid [sm xct_to_tid [sm xct]]
    # destroy  everything in the file but not the file itself
    for { set i 1} { $i <= $nrecs} { incr i} {
	verbose $tab1 t1: $tid: sm destroy_rec $rid($i) ...
	sm destroy_rec $rid($i)
	verbose $tab1 t1: $tid: destroyed $rid($i)
    }
    # verbose lock table before sync
    # sm dump_locks
    verbose $tab1 t1: $tid: sync 1
sync
    # verbose lock table AFTER sync
    # sm dump_locks
    # verbose threads AFTER sync
    # sm dump_threads

    #create a bunch of recs in file 1, hoping we reallocate
    # the extents
    for { set i 1} { $i <= $nrecs} { incr i} {
	verbose $tab1 t1: $tid: sync [expr {$i+1} ]
sync
	verbose $tab1 t1: $tid: sm create_assoc $f1 [formatlong 0 $mx %d $i]B 
	catch {sm create_assoc $f1 [formatlong 0 $mx %d $i]B $i} err
	verbose $tab1 t1: $tid: result : $err
    }
    if {$logging==0} {
	verbose $tab1 Logging off: substituting commit for abort
	sm commit_xct
    } else {
	verbose $tab1 aborting...
	sm abort_xct
    }
}
proc t2 {nrecs} {
    global f1  bshort_form ashort_form
    set tab2 "		"
    for { set i 1} { $i <= $nrecs} { incr i} {
	sm begin_xct
        # turn off lock escalation since it causes deadlock with the sync's
        sm set_escalation_thresholds {0 0 0}
	set tid [sm xct_to_tid [sm xct]]
	verbose $tab2 t2 $tid create_assoc $f1  [format $ashort_form $i]
	catch {sm create_assoc $f1 [format $ashort_form $i] $i} err
	verbose $tab2 t2 $tid result: $err
	verbose $tab2 t2 $tid create_assoc $f1  [format $bshort_form $i]
	catch {sm create_assoc $f1 [format $bshort_form $i] $i} err
	verbose $tab2 t2 $tid result: $err

	verbose $tab2 t2 $tid sync $i
sync
	verbose $tab2 commit_xct
	sm commit_xct
    }
    verbose $tab2 t2 sync last $i + 1
sync
}

#
# spawn the threads
#

set y1 [fork_thread t1 $nrecs]
set y2 [fork_thread t2 $nrecs]
verbose spawned threads $y1 $y2
for { set i 1} { $i <= $nrecs} { incr i} {
    verbose sync_thread $i: $y1 $y2 
    sync_thread $y1 $y2
}
verbose sync_thread last: $y1 $y2 
sync_thread $y1 $y2
join_thread $y1 $y2

#
# clean up
#
sm begin_xct
verbose destroy_file $f0
sm destroy_file $f0
sm destroy_index $f1
sm commit_xct

unset i j formsize nrecs f0 f1
unset ashort_form bshort_form
unset mx rid y1 y2

