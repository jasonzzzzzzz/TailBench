# <std-header style='tcl' orig-src='shore'>
#
#  $Id: btree.9,v 1.22.2.1 2009/06/23 01:01:46 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#  test btree bulk load: duplicate keys
#  default key type here is b*1000
# also
#  tests btree bulk load with multiple input files
#
#
# start up
#
verbose "init"
source $script_dir/vol.init

set rec_form  "%023d"

# creates 2 files 
set nrec 20

#
# create 2 files of <key, el> pair and sort the files by keys 
# The two files *must* be arranged so that all items in the first
# file are < all items in 2nd file. 
#
sm begin_xct
set f1 [sm create_file $volid]
verbose "created file $f1"
set f2 [sm create_file $volid]
verbose "created file $f2"
set k 0
set data 0
set err 0
verbose FIRST set
for {set i 0} {$i < $nrec} {incr i} {
    for {set j 0} {$j < $i } {incr j} {
	incr k
	set data [expr { $nrec - $i } ]
	# default: string type
        verbose sm create_rec $f1 [format $rec_form $data] 4 $k
        catch {sm create_rec $f1 [format $rec_form  $data] 4 $k} err
	verbose2 result of create: $err
    }
}

verbose SECOND set
for {set i 0} {$i < $nrec} {incr i} {
    for {set j 0} {$j < $i } {incr j} {
	incr k
	set data [expr { ($nrec - $i) + $nrec - 1 } ]
	# default: string type
        verbose sm create_rec $f2 [format $rec_form $data] 4 $k
        catch {sm create_rec $f2 [format $rec_form  $data] 4 $k} err
	verbose2 result of create: $err
    }
}

# sort file gets rid of duplicates (distinct) or leaves them (normal):

set run_size 3
set ktype b23
set where hdr
set property regular
#set destruct keep
set destruct destruct
# set distinct normal
# With NEW sort, if you use distinct, you'll remove
# all items that match on KEY ONLY
set distinct normal
set f3 [sm sort_file $f1 $volid $run_size $ktype $where $distinct $destruct $property]
set f4 [sm sort_file $f2 $volid $run_size $ktype $where $distinct $destruct $property]

sm commit_xct

sm begin_xct
set ndx [sm create_index $volid btree]

# blkld_ndx assumes that input file is already sorted
# if no key type is given as 3rd argument:
if [catch {sm blkld_ndx $ndx 2 $f3 $f4} stat] {
    verbose result of bulk load: $stat
    sm abort_xct
    return 1
}

verbose created index $ndx again
verbose stats: $stat
#sm print_index $ndx
sm commit_xct

restart

#
# verify ascending
#
verbose "scan up: (nb: lexicographic order)"
sm begin_xct
set scan [sm create_scan $ndx >= neg_inf <= pos_inf]
set nrec [expr {$nrec * 2}]
set pr 0
for {set kk 0} {1} {incr kk}  {
    set r [sm scan_next $scan]
    if {$r == "eof"} then { break }
    set key [string trimleft [lindex $r 0] 0]
    set el [lindex $r 1]
    verbose "$kk : scanned ($key, $el)"
    assert {expr {$key >= $pr} }
    set pr $key
}
verbose $k recs $kk scanned eof == $r

assert {expr $kk == $k}
sm destroy_scan $scan
verbose "---- successful"

# Probe from 1 to $nrec-2 because the data for the 2nd
# set go from $nrec->$nrec-2
verbose "probe:"
for {set i 1} {$i < $nrec-1} {incr i} {
    set el [sm find_assoc $ndx [format $rec_form  $i]]
    verbose probed $i $el
    # lexico order defeats the following assert:
    # assert {expr $el == $i}
}
sm commit_xct
verbose "---- successful"

if { 0 } {
    verbose [sm gather_stats]
    verbose doing dstats to check disk
    dstats $volid
}


sm begin_xct
verbose destroy index $ndx
sm destroy_index $ndx
if {$destruct == "keep"} {
    verbose destroy file $f1
    sm destroy_file $f1
    verbose destroy file $f2
    sm destroy_file $f2
}
verbose destroy file $f3
sm destroy_file $f3
verbose destroy file $f4
sm destroy_file $f4
sm commit_xct
verbose [sm gather_stats]

unset scan ndx nrec
unset i j f2 f1 f3 f4 
unset r el key
unset stat
unset err data k kk
unset run_size ktype
unset distinct destruct where property
unset rec_form pr

