# <std-header style='tcl' orig-src='shore'>
#
#  $Id: random.perf,v 1.10.2.2 2009/12/03 00:21:13 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#	Time random reading & writing 
#   Parameters: 
#   	        size of objects written 
#		(write size== whole object)
#		logging on or off
#
#
# set STARTOVER 1

if [is_set STARTOVER] {
	set fid 0
} else {
    set dont_force_reformat 1
    set fid s(1.4)
}

source $script_dir/vol.init
set objsize [expr {8192 * 8}]

#ignored for now
set logging 0

set config [sm config_info]

if {$volid == 0} {
	foreach i $smsh_device_list {
		set dev  [lindex $i 0]
		set size [lindex $i 1]
		set vol  [lindex $i 2]

		sm mount_dev $dev $vol

		set vol_list [sm list_volumes $dev]
		if { [llength $vol_list] == 0 } {
			# set quota [sm get_device_quota $dev]
			sm create_vol $dev $vol $size
		}

		# set quota [sm get_device_quota $dev]
		# set quota [sm get_volume_quota $vol]

		set vol_list [sm list_volumes $dev]
		assert {[expr [llength $vol_list] == 1]}
		assert {[expr [string compare [lindex $vol_list 0] $vol.0.0.0:0] == 0]}

		unset vol_list size def vol
	}
}
if {$volid == 0} {
    set volid [lindex [lindex $smsh_device_list 0] 2]
}

set volsize [lindex [sm get_volume_quota $volid] 0]
set used [lindex [sm get_volume_quota $volid] 1]
set volsize [expr {$volsize - $used} ]
set objksize [expr {$objsize / 1024} ]
set nobjs [expr {$volsize / $objksize} ]
unset objksize

set hdr "" 
set id_body_width zvec%d
set body [format $id_body_width $objsize]

# set fid 0
# set fid s(2.4)
# 
# create a huge file
#
sm begin_xct
    if {$fid==0} {
	set fid [sm create_file $volid ]
	echo fid=$fid
	echo creating $nobjs objects of size $objsize ...
	set total 0
	for {set i 0} {$i < $nobjs} {incr i} {
	    echo $i
	    set r($total) [sm create_rec $fid $hdr $objsize $body]
	    if { $i == 100 } {
		sm commit_xct
		echo committing $i for a total of $total
		set $nobjs [expr { $nobjs - $i }]
		set i 0
		sm begin_xct
	    }
	    incr total
	}
	echo done creating...
    } else {
	set scan [sm scan_file_create $fid t_cc_record]
	set pin [sm scan_file_next $scan 0]
	set i 0
	while {$pin != "NULL"} {
	    set r($i) [sm pin_rid $pin]
	    # don't mess up the scan context
	    # sm pin_unpin $pin
	    set pin [sm scan_file_next $scan 0]
	    set i [expr {$i+1} ]
	}
	sm scan_file_destroy $scan
    }
#   clear the buffer pool, invalidate 
    sm force_buffers true
sm commit_xct

set nreads 300
set nreadthreads 2
set nwrites 300
set nwritethreads 2

link_to_inter_thread_comm_buffer commbuf
set total_msec  0
set total_bytes_written  0
set total_bytes_read  0
set commbuf [list $total_msec $total_bytes_written $total_bytes_read]

# prepare to deal with hot objects
set hot   [expr $nwrites / 100]

source $script_dir/random.perf.tcl


# these ranges of objects are intended
# to avoid any deadlocks.

set starttime [timeofday]

for {set i 0} {$i < $nwritethreads} {incr i} {
    set start [expr {$i * 200} ]
    echo forking write $i $start 200 $nwrites
    set y($i) [fork_thread time_writes $i $start 200 $nwrites]
}
set start 700
for {set j $i} {$j < [expr {$nreadthreads+$nwritethreads}]} {incr j} {
    echo forking read $j $start 200 $nreads 
    set y($j) [fork_thread time_reads $j $start 200 $nreads]
}
set thid $j

clearstats

# TODO: this has to changed by hand if we're to have more than
# a total of 6 threads
for {set i 0} {$i < $thid} {incr i} { 
    case $thid in {
	1 { sync_thread $y(0)
  	    sync_thread $y(0) 
	    join_thread $y(0)
	    }
	2 { sync_thread $y(0) $y(1)
	    sync_thread $y(0) $y(1) 
	    sync_thread $y(1) 
	    join_thread $y(0) $y(1)
	    }
	3 { sync_thread $y(0) $y(1) $y(2)
	    sync_thread $y(0) $y(1) $y(2) 
	    sync_thread $y(1) $y(2) 
	    sync_thread $y(2) 
	    join_thread $y(0) $y(1) $y(2) 
	    }
	4 { sync_thread $y(0) $y(1) $y(2) $y(3)
	    sync_thread $y(0) $y(1) $y(2) $y(3) 
	    sync_thread $y(1) $y(2) $y(3) 
	    sync_thread $y(2) $y(3) 
	    sync_thread $y(3) 
	    join_thread $y(0) $y(1) $y(2) $y(3) 
	    }
	5 { sync_thread $y(0) $y(1) $y(2) $y(3) $y(4)
	    sync_thread $y(0) $y(1) $y(2) $y(3) $y(4) 
	    sync_thread $y(1) $y(2) $y(3) $y(4) 
	    sync_thread $y(2) $y(3) $y(4) 
	    sync_thread $y(3) $y(4) 
	    sync_thread $y(4) 
	    join_thread $y(0) $y(1) $y(2) $y(3) $y(4) 
	    }
	6 { sync_thread $y(0) $y(1) $y(2) $y(3) $y(4) $y(5) 
	    sync_thread $y(0) $y(1) $y(2) $y(3) $y(4) $y(5) 
	    sync_thread $y(1) $y(2) $y(3) $y(4) $y(5) 
	    sync_thread $y(2) $y(3) $y(4) $y(5) 
	    sync_thread $y(3) $y(4) $y(5) 
	    sync_thread $y(4) $y(5) 
	    sync_thread $y(5) 
	    join_thread $y(0) $y(1) $y(2) $y(3) $y(4) $y(5) 
	    }
    }
}

sm force_buffers
set endtime [timeofday]
set stats [sm gather_stats]

# compute pages written/read from stats
set total_pgs_read [lindex [select_stat $stats vol_reads] 1]
set total_pgs_written [lindex [select_stat $stats vol_writes] 1]

# compute total clock time
set ms [diff_in_ms $starttime $endtime]
set sec [expr {$ms / 1000000} ]

# compute some flaky "parallelism factor"

set total_msec [lindex $commbuf 0]
set total_bytes_written [lindex $commbuf 1]
set total_bytes_read [lindex $commbuf 2]

# echo total_msec $total_msec
# echo total_bytes_written $total_bytes_written
# echo total_bytes_read $total_bytes_read

# parallelism factor: sum of percieved clock times / total clock time
set plfac [expr 1.0 * $total_msec / $ms ]

# print everything
pstats
echo "TOTALS: RD =" [expr {$total_pgs_read / $sec}] "P/S; WR =" [expr {$total_pgs_written / $sec}] "P/S "
echo "TOTALS: RD =" [expr {$total_bytes_read / $sec}] "B/S; WR =" [expr {$total_bytes_written / $sec}] "B/S "

echo Speedup $plfac for [expr $nreadthreads + $nwritethreads] threads = [expr $plfac / $nreadthreads + $nwritethreads]


clearstats
sm begin_xct
sm force_buffers
sm commit_xct
echo CLEAN-UP required the following:
pstats

echo DONE: $nreadthreads read threads, $nwritethreads write threads

unset plfac
unset total_pgs_read
unset total_pgs_written
unset total_bytes_read
unset total_bytes_written
unset nwritethreads
unset ms
unset total_msec
unset sec
unset nreadthreads
unset start
unset logging

