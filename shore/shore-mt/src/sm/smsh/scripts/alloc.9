# <std-header style='tcl' orig-src='shore'>
#
#  $Id: alloc.9,v 1.13 1999/06/07 19:05:09 kupsch Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#  Recovery test: deallocate an extent and reallocate to another
#  store (file) and then crash.
#  Only need one thread for this.
#  IN this case, when we reallocate, we want to insert it
#  into a btree, so the extent allocation is compensated
#  (withing the btree op).  Undo had better work.
#
#  alloc.8 reallocates to btree (bad)
#

source $script_dir/vol.init

# format for body size -- >= one page
set formsize [expr { $lg_rec_page_space - 10} ]
set nrecs 20


#
# firest simply create the files
#

sm begin_xct
set f0 [sm create_file $volid]
set f1 [sm create_file $volid]
verbose created files $f0 $f1

# populate file 0
for { set i 1} { $i <= $nrecs} { incr i} {
    set j [sm create_rec $f0 h$i 1000 [formatlong 0 $formsize %010d $i] ]
    set rid($i) $j
    verbose created rec $rid($i)
}
verbose created $nrecs recs file $f0
sm commit_xct

sm begin_xct
# destroy  everything in the file but not the file itself
for { set i 1} { $i <= $nrecs} { incr i} {
    verbose t2 sm destroy_rec $rid($i) ...
    sm destroy_rec $rid($i)
    verbose t2 destroyed $rid($i)
}

#create a bunch of recs in file 1, hoping we reallocate
# the extents
for { set i 1} { $i <= $nrecs} { incr i} {
    set j [sm create_rec $f1 h$i 1000 [formatlong 0 $formsize %010d $i] ]
    set rid($i) $j
    verbose created entry $rid($i)
}

if {$logging==0} {
    verbose Logging off: substituting commit for abort
    sm commit_xct
} else {
    verbose aborting...
    sm abort_xct
}

#
# clean up
#
sm begin_xct

verbose destroy_file $f0
sm destroy_file $f0

verbose destroy_file $f1
sm destroy_file $f1

sm commit_xct

unset formsize f0 f1 nrecs rid i j
