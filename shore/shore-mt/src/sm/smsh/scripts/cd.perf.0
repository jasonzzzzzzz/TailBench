# <std-header style='tcl' orig-src='shore'>
#
#  $Id: cd.perf.0,v 1.8.2.2 2009/12/21 18:45:14 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#   Test rollback of a file destroy.

set_config_info

set npages 500

# 1 per page
set objsize 8000

set nobjs [expr { ($max_small_rec/$objsize) * $npages } ]

source $script_dir/vol.init

# make an objsize buffer full of alphabetic characters
set ten "abcde12345"
set hundred ""
# make 100 bytes
for {set i 0} {$i < 10} {incr i}  {
    set hundred "$hundred$ten"
}

set body ""
for {set i 100} {$i < $objsize} {set i [expr $i + 100]}  {
    set body "$body$hundred"
}


set hdr "" 
# set id_body_width zvec%d
# set body [format $id_body_width $objsize]

# 
# in existing file, create a buncha records
# in one transaction
#
# First, clear out the file
#
set fid 0

sm begin_xct
    if {$fid!=0} {
	sm destroy_file $fid 
	set fid 0
    }

    # Now, start over and time it
    set fid [sm create_file $volid ]
    verbose fid=$fid
sm commit_xct

verbose CREATING $nobjs RECS of size $objsize

set i 0

sm begin_xct
set dummy [sm gather_stats reset]
set wtime [ time {
	for {set i 0} {$i < $nobjs} {set i [expr $i + 1]} {
	    sm create_rec $fid $hdr $objsize $body
	}
	sm force_buffers true
} 1 ]

verbose CREATED $nobjs RECS of size $objsize, forced buffers
echo total create time = $wtime
set dummy [sm gather_stats reset]
verbose [pnzstats $dummy]
set dummy [sm gather_xct_stats reset]
verbose [pnzstats $dummy]
sm commit_xct

verbose forcing buffers again
sm force_buffers true

verbose DESTROYING FILE 

sm begin_xct
set dummy [sm gather_stats reset]
set wtime [ time {
	sm destroy_file $fid
	sm force_buffers true
} 1 ]
verbose

verbose DESTROYED file
echo total destroy time = $wtime
set dummy [sm gather_stats reset]
verbose [pnzstats $dummy]
set dummy [sm gather_xct_stats reset]
verbose [pnzstats $dummy]

sm abort_xct
# aborted: now destroy for real:

if {$fid!=0} {
	sm begin_xct
	sm destroy_file $fid 
	set fid 0
	sm commit_xct
}

unset wtime dummy fid i body hdr hundred npages ten nobjs objsize
