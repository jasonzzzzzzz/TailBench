# <std-header style='tcl' orig-src='shore'>
#
#  $Id: tmpfile.1,v 1.23.4.1 2009/06/23 01:01:46 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#	Test Temp files
#
source $script_dir/vol.init

# set num_rec 2000
set num_rec 100
set id_width %06d

if [is_set rid] {
   unset rid
}

# First, see if you can abort the creation
# of a temp file
sm begin_xct
verbose tid [sm xct_to_tid [sm xct]]
set tfid [sm create_file $volid tmp]
verbose TEMP fid $tfid
set trid(0) $null_rid
verbose timing the create of $num_rec NO LOG
verbose [time {
	for {set i 1} {$i <= $num_rec} {incr i} {
	set trid($i) [
	    sm create_rec $tfid [format $id_width $i] 10 data.[format %01000d $i]
	]
	}
} 1]
for {set i 1} {$i <= $num_rec} {incr i} {
    verbose TMP rid $trid($i)
}

verbose ABORTING the creation of a temp file
sm abort_xct

verbose ABORT DONE
sm begin_xct
verbose tid [sm xct_to_tid [sm xct]]
set tfid [sm create_file $volid tmp]
verbose TEMP fid $tfid

set trid(0) $null_rid
verbose timing the create of $num_rec NO LOG
verbose [time {
	for {set i 1} {$i <= $num_rec} {incr i} {
	set trid($i) [
		sm create_rec $tfid [format $id_width $i] 10 data.[format %01000d $i]
	]
	}
} 1]
for {set i 1} {$i <= $num_rec} {incr i} {
    verbose TMP rid $trid($i)
}

sm commit_xct

sm begin_xct
verbose tid [sm xct_to_tid [sm xct]]

set fid [sm create_file $volid regular]
verbose REGULAR fid $fid

set rid(0) $null_rid
verbose timing the create of $num_rec WITH LOG
verbose [time {
	for {set i 1} {$i <= $num_rec} {incr i} {
	set rid($i) [
		sm create_rec $fid [format $id_width $i] 10 data.[format %01000d $i]
	]
	}
} 1]

sm commit_xct

proc t_timeit { num_rec op finish } {
	global trid

	sm begin_xct
	verbose tid [sm xct_to_tid [sm xct]]
	verbose timing the $op of $num_rec NO LOG
	verbose [time {
	for {set i 1} {$i <= $num_rec} {incr i} {
		verbose sm $op $trid($i) 
		sm $op $trid($i) 0 "ABCDEFGHIJKLMNOPQRST" 
	}
	} 1]

	verbose $finish
	if {$finish == "restart"} {
	  restart
	} else {
	  catch [sm $finish] err
	  verbose result of restart is $err
	}
	return 0
}

proc timeit { num_rec op finish } {
	global rid

	sm begin_xct
	verbose tid [sm xct_to_tid [sm xct]]
	verbose timing the $op of $num_rec WITH LOG
	verbose [time {
	for {set i 1} {$i <= $num_rec} {incr i} {
		verbose sm $op $rid($i) 
		sm $op $rid($i) 0 "ABCDEFGHIJKLMNOPQRST" 
	}
	} 1]

	verbose $finish
	sm $finish
}

t_timeit $num_rec update_rec commit_xct
timeit $num_rec update_rec commit_xct

t_timeit $num_rec update_rec abort_xct
t_timeit $num_rec update_rec restart

sm begin_xct
sm destroy_file $fid
sm commit_xct

unset rid
unset tfid trid fid num_rec i id_width

