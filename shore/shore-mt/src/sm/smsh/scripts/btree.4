# <std-header style='tcl' orig-src='shore'>
#
#  $Id: btree.4,v 1.21.4.1 2010/01/12 02:02:00 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#  Load a unique btree, verify it's content, attempt to reinsert 
#

#
# start up
#
source $script_dir/vol.init



set nrec 120
# set nrec 70

#
# create index and load it up 
#
sm begin_xct
verbose [sm xct_to_tid [sm xct]]
set ndx [sm create_index $volid uni_btree]
verbose created index $ndx

verbose [sm get_store_info $ndx]
for {set i 1} {$i <= $nrec} {incr i} {
    verbose2 inserting $i
    sm create_assoc $ndx [format $short_form $i] $i
}
if {$logging==0} {
    verbose "Logging off: sm abort_xct not done.  Committing instead."
    sm commit_xct 
} else {
    verbose sm abort_xct 
    sm abort_xct 
}

sm begin_xct
verbose [sm xct_to_tid [sm xct]]
set ndx [sm create_index $volid uni_btree]
verbose created index $ndx
for {set i 1} {$i <= $nrec} {incr i} {
    verbose2 inserting $i
    catch {sm create_assoc $ndx [format $short_form $i] $i} err
    assert {expr [error_is $err E_OK] == 1}
}
verbose committing
sm commit_xct

#
# attempt reinsert
#
sm begin_xct
verbose [sm xct_to_tid [sm xct]]
verbose reinserting $nrec records --- should get $nrec duplicate errors
set ecaught 0
for {set i 1} {$i <= $nrec} {incr i} {
    verbose2 inserting $i
    catch {sm create_assoc $ndx [format $short_form $i] $i} err_caught
    verbose2 result of create_assoc is $err_caught
    if {[error_is $err_caught E_DUPLICATE] == 1} { incr ecaught }
}
verbose $ecaught ==? $nrec
assert {expr $ecaught == $nrec}
verbose caught all $nrec errors
sm commit_xct

#
# verify ascending
#
# sm begin_xct
# sm print_index $ndx
# sm commit_xct

verbose "scan up:"
sm begin_xct
verbose [sm xct_to_tid [sm xct]]
set scan [sm create_scan $ndx >= neg_inf <= pos_inf]
for {set i 1} {$i <= $nrec} {incr i}  {
    set r [sm scan_next $scan]
    if {[string compare $r eof] == 0} then { break }
    set key [string trimleft [lindex $r 0] 0]
    set el [lindex $r 1]
    verbose2 "scanned ($key, $el)"
    assert {expr $key == $el}
    verbose2 expecting $i == $key
    assert {expr $i == $key}
}
assert {expr $i > $nrec}
assert {expr [string compare [sm scan_next $scan] eof] == 0}
sm destroy_scan $scan
verbose "---- successful"

verbose "probe:"
for {set i 1} {$i <= $nrec} {incr i} {
    set el [sm find_assoc $ndx [format $short_form $i]]
    assert {expr $i == $el}
    verbose2 probed $i
}
verbose2 [sm gather_stats]
verbose "---- successful"

sm commit_xct

sm begin_xct
verbose [sm xct_to_tid [sm xct]]
sm destroy_index $ndx
sm commit_xct
verbose [sm gather_stats]

unset ndx nrec
unset i r el key
unset err_caught err
unset ecaught scan

