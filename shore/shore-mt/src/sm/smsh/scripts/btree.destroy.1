# <std-header style='tcl' orig-src='shore'>
#
#  $Id: btree.destroy.1,v 1.9 1999/06/07 19:05:21 kupsch Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

source $script_dir/vol.init
set rec_form  %010d

set nrec 10

proc scan_up_destroy {ndx nrec dodestroy}  {
    #
    # verify ascending
    #
    verbose "scan up:"
    set destroy 0
    set scan [sm create_scan $ndx >= neg_inf <= pos_inf]
    for {set i 1} {$i <= $nrec} {incr i}  {
        set r [sm scan_next $scan]
	if {[string compare $r eof] == 0} then { break }
        set key [lindex $r 0]
        set el [lindex $r 1]
        verbose "scanned ($key, $el)"
        assert {expr [string trimleft $key 0] == $el}
        assert {expr $i == [string trimleft $key 0]}

	if { $destroy } {
	    # remove the item from the index
	    verbose destroying all $ndx $destroy
	    sm destroy_all_assoc $ndx $destroy 
	    verbose destroy done $destroy
	}
	if { $dodestroy } {
	    set destroy $key
	}
    }
    assert {expr $i > $nrec}
    assert {expr [string compare [sm scan_next $scan] eof] == 0}
    sm destroy_scan $scan
    verbose "---- successful"
}
#
# create index and load it up 
#
sm begin_xct
set ndx [sm create_index $volid btree]
verbose created index $ndx
sm commit_xct

sm begin_xct
for {set i 1} {$i <= $nrec} {incr i} {
    verbose inserting $i
    sm create_assoc $ndx [format $rec_form  $i] $i
}
sm commit_xct

sm begin_xct
scan_up_destroy $ndx $nrec 0
scan_up_destroy $ndx $nrec 1
scan_up_destroy $ndx $nrec 0
sm commit_xct

