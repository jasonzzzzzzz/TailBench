# <std-header style='tcl' orig-src='shore'>
#
#  $Id: btree.2all,v 1.15.4.2 2010/01/12 02:01:58 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#  test all types of btree keys
#  Test scans with im, kvl, none.  IM will interpret the
#  elements as RIDs and grab locks on those, but it's ok
#  if the elements aren't really RIDs -- they'll just be wierd locks
#
#  Don't test with modkvl, since only == == scans
#  are allowed with those.
#  
#

#
# start up
#
source $script_dir/vol.init

set ok 1
set bad 0
set save_random 0
set nrec 80

verbose "testing integer key btree (non-unique)"

foreach cc {t_cc_none t_cc_kvl t_cc_im} {
    sm begin_xct
verbose tid [sm xct_to_tid [sm xct]]

    if { $ok } {
	# OK on pentium
	verbose sm test_typed_btree $volid $nrec f8 $cc
	if { $save_random } { write_random ssh.seed.f8 }
	sm test_typed_btree $volid $nrec f8 $cc

    }
    if { $ok } {
	# OK on pentium
	verbose sm test_typed_btree $volid $nrec f4 $cc
	if { $save_random } { write_random ssh.seed.f4 }
	sm test_typed_btree $volid $nrec f4 $cc
    }

    if { $ok } {
	    # OK on pentium

    sm commit_xct
    sm begin_xct
verbose tid [sm xct_to_tid [sm xct]]

	verbose sm test_typed_btree $volid $nrec i4 $cc
	if { $save_random } { write_random ssh.seed.i4 }
	sm test_typed_btree $volid $nrec i4 $cc

    }
    if { $ok } {
	verbose sm test_typed_btree $volid $nrec i8 $cc
	if { $save_random } { write_random ssh.seed.i8 }
	sm test_typed_btree $volid $nrec i8 $cc
    }
    if { $bad } {
	    # OK on pentium

	verbose sm test_typed_btree $volid $nrec i2 $cc
	if { $save_random } { write_random ssh.seed.i2 }
	sm test_typed_btree $volid $nrec i2 $cc

    }
    if { $ok } {
	# problem on pentium

	verbose sm test_typed_btree $volid $nrec i1 $cc
	if { $save_random } { write_random ssh.seed.i1 }
	sm test_typed_btree $volid $nrec i1 $cc

    }
    if { $ok } {
	    # OK on pentium
     
    sm commit_xct
    sm begin_xct
verbose tid [sm xct_to_tid [sm xct]]

	verbose sm test_typed_btree $volid $nrec b1 $cc
	if { $save_random } { write_random ssh.seed.b1 }
	sm test_typed_btree $volid $nrec b1 $cc

    }

    if { $ok } {
	# OK on pentium
	# get errors
	verbose sm test_typed_btree $volid $nrec b23 $cc
	if { $save_random } { write_random ssh.seed.b23 }
	sm test_typed_btree $volid $nrec b23 $cc

    }
    if { $ok } {
	# OK on pentium

	# debugflags "btree_impl.cpp shell2.cpp"
	verbose sm test_typed_btree $volid $nrec B*1000 $cc
	if { $save_random } { write_random ssh.seed.b1000 }
	sm test_typed_btree $volid $nrec B*1000 $cc


    sm commit_xct
    sm begin_xct
verbose tid [sm xct_to_tid [sm xct]]

    }

    if { $ok } {
	    # OK
	verbose sm test_typed_btree $volid $nrec u8 $cc
	# read_random ssh.seed.u8
	if { $save_random } { write_random ssh.seed.u8 }
	sm test_typed_btree $volid $nrec u8 $cc
    }

    if { $ok } {
	    # OK
	verbose sm test_typed_btree $volid $nrec u4 $cc
	# read_random ssh.seed.u4
	if { $save_random } { write_random ssh.seed.u4 }
	sm test_typed_btree $volid $nrec u4 $cc
    }

    if { $ok } {
	    #oK
	verbose sm test_typed_btree $volid $nrec u2 $cc
	# read_random ssh.seed.u2
	if { $save_random } { write_random ssh.seed.u2 }
	sm test_typed_btree $volid $nrec u2 $cc

    }
    if { $ok } {
	    #problem
	verbose sm test_typed_btree $volid $nrec u1 $cc
	# read_random ssh.seed.u1
	if { $save_random } { write_random ssh.seed.u1 }
	sm test_typed_btree $volid $nrec u1 $cc

    }

    sm commit_xct
}

unset nrec cc
unset bad ok save_random

