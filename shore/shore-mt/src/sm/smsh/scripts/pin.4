# <std-header style='tcl' orig-src='shore'>
#
#  $Id: pin.4,v 1.12.2.2 2009/12/21 18:45:17 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#        Test file pin_i::append_rec running out of space
#       WARNING: takes a long time if you're using a large volume
#
source $script_dir/vol.init

echo "WARNING: this script takes a long time to consume all the volume's space"

# clear stats
set buffer zvec${max_small_rec}
set tx 1

sm begin_xct
    set f1 [sm create_file $volid]
    set r1 [sm create_rec $f1 hdr12345 11 hellodata]

    # pin the record and cause it to be converted to a large
    # record.  Keep appending until we run out of space on the
    # volume.  (Note: If we alternate this with two records, we should
    # be able to force them to become non-chunk implementations
    # of large records:  see lgrec.6)

    set pin [sm pin_create]
    sm pin_pin $pin $r1 0
    for {set i 1} {$i > 0} {incr i} {
        if [catch {sm pin_append_rec $pin $buffer} err] {
            set tx [sm xct]
            verbose ERROR in tx $tx: $err
            sm pin_unpin $pin
            sm pin_destroy $pin
            break
        }
        if [expr { ($i/1000)*1000 == $i}] {
            verbose $i ...
        }
    }
    verbose  wrote $i records

    #
    # Hack for testing log space warning: the ssh out_of_log_space
    # function returns E_USERABORT and in this case, we should
    # do a user-level abort. This only happens if you set the
    # threshold low but >0 
    #
    if [expr {[error_is $err E_USERABORT] != 0} ] {
        verbose ERROR: expected error  $err.  Aborted. 
        # already done. sm abort_xct
    } else { if [expr {[error_is $err E_LOGSPACEWARN] != 0} ] {
        set tx [sm xct]
        set tid "none"
        if [expr $tx != 0] {
           set tid [sm xct_to_tid $tx]
        }
        verbose EXPECTED ERROR: $err.  Aborting $tx $tid
        sm abort_xct
    } else {
        if [expr {[error_is $err E_OUTOFSPACE] == 0} ] {
            verbose ERROR: unexpected error  $err  expected E_OUTOFSPACE
        } else {
            verbose expected error  $err. 
			verbose destroying file .. time-consuming
		}
        verbose sm destroy_file $f1
        sm destroy_file $f1
        verbose sm commit_xct
        sm commit_xct
    } }

# commit or abort above

unset pin i r1 buffer f1 err tx

