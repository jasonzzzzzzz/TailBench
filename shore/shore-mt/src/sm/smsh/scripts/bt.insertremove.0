# <std-header style='tcl' orig-src='shore'>
#
#  $Id: bt.insertremove.0,v 1.13.4.1 2009/12/03 00:21:06 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

source $script_dir/vol.init
source $script_dir/bt.tcl

set keylist { 118 1493 1663 1797 235 2487 \
	2786 2927 \
	3174 373 \
	3774 3787 \
	3897 3912 \
	900 800 700 600 500 400 399 398 397 396 395 394 393 392  }

set maxnum 4044

# 1 key/value per page:
set elemlength 4044

proc mkval { i e } {
    global max_btree_entry_size
    set maxsize [expr {$max_btree_entry_size - 30}]
    if {$max_btree_entry_size <= 4048} {
	set res [format "%0*s" $maxsize a]
    } else {
	set res [format "%0*s" $e a]
    }
    return $res
}


#
# create index and load it up 
#
sm begin_xct
set ndx [sm create_index $volid uni_btree]
verbose created index $ndx
sm commit_xct


# 
# insert values in list
#
set nrec [llength $keylist]

verbose $nrec records: $keylist

proc random_restart { a } {
    set j [random 3]
    for { set i 0 } { $i <= $j } { incr i } {
	_restart $a
    }
}

proc runtest { term op ndx nrec keylist } {

    verbose RUNTEST $term
	
    set key 1
    set value 1
    sm begin_xct
    for {set i 0} {$i < $nrec} {incr i} {
	verbose inserting $i
	set key [lindex $keylist $i] 
	set value [mkval $i $key]

	verbose sm $op $ndx $key <elem $key length>
	sm $op $ndx $key $value

	if [expr $key == 394 ] {
		if [expr [string compare $op "destroy_assoc" ] == 0] {
		    verbose random_restart
		    random_restart false
		    return
		}
	}

	# verbose sm find_assoc $ndx $key
	# set res [sm find_assoc $ndx $key]
	# assert {[expr [string compare $value $res] == 0]}
	# verbose FOUND
    }
    switch $term {
       abort { 
	    if {$logging==0} {
		verbose "Logging off: sm abort_xct not done.  Committing instead."
		sm commit_xct 
	    } else {
		verbose sm abort_xct 
		sm abort_xct 
	    }
	}
       commit { 
	    verbose sm commit_xct 
	    sm commit_xct 
	}
       restart { 
	    verbose random_restart
	    random_restart false
	}
    }
}

runtest commit create_assoc $ndx $nrec $keylist
if {$logging==0} {
    echo "Logging off: skipping restart portion of script. "
} else {
    runtest restart destroy_assoc $ndx $nrec $keylist
}
runtest commit destroy_assoc $ndx $nrec $keylist

sm begin_xct
sm destroy_index $ndx
verbose destroyed index $ndx
sm commit_xct

unset maxnum elemlength ndx nrec 

