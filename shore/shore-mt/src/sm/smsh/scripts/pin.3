# <std-header style='tcl' orig-src='shore'>
#
#  $Id: pin.3,v 1.13.4.1 2009/10/27 16:44:51 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#        Test pin latch deadlock
#
source $script_dir/vol.init

set update_ops {update_rec update_rec_hdr append_rec truncate_rec}

sm begin_xct
set f1 [sm create_file $volid]
verbose f1 = $f1

for {set i 0} {$i < [llength $update_ops]} {incr i} {
    set rec($i) [sm create_rec $f1 rec$i 11 rec$i]
    verbose rec $i = $rec($i)
}
sm commit_xct


proc pin_test {rid op thrnum} {
    sm begin_xct
    set pin [sm pin_create]
    verbose "$thrnum sm pin_pin $pin $rid UD for op $op"
    sm pin_pin $pin $rid UD
    verbose $thrnum pinned $rid UD. now first sync
    sync
 
    #sm pin_unpin $pin

    verbose $thrnum updating $rid ...
    set err 0
    switch $op {
        update_rec        {catch {sm pin_update_rec $pin 1 "X"} err}
        update_rec_hdr    {catch {sm pin_update_rec_hdr $pin 1 "X"} err}
        append_rec        {catch {sm pin_append_rec $pin "X"} err}
        truncate_rec      {catch {sm pin_truncate_rec $pin 1} err}
        default {assert {0}}
    }
    if { $err != 0 } {
        if {[error_is $err E_DEADLOCK] == 1} {
            verbose $thrnum "DEADLOCK in rem1 (expected) with $op on $rid"
            verbose $thrnum (converted from latch-lock to lock-lock)
            # see comments in pin.cpp pin_i::_repin
            verbose $thrnum aborting me
        }
    } else {
        verbose $thrnum finished updating $rid.
    }
    sm pin_destroy $pin
    verbose $thrnum second sync rid=$rid
    sync
    verbose $thrnum committing
    sm commit_xct
}

set update_ops {update_rec update_rec_hdr append_rec truncate_rec}

foreach op $update_ops {
    verbose TESTING $op ___________________________________________
    verbose forking 1
    set t1 [ fork_thread pin_test $rec(0) $op 1]
    verbose forking 2
    set t2 [ fork_thread pin_test $rec(1) $op 2]

    sync_thread $t1
    sync_thread $t2

    verbose joining threads -- order is important here
    sync_thread $t2
    sync_thread $t1
    join_thread $t1 $t2
    verbose END $op ___________________________________________
}
sm begin_xct
sm destroy_file $f1
sm commit_xct

verbose done
unset rec update_ops t1 t2 op i f1

