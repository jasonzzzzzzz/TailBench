# <std-header style='tcl' orig-src='shore'>
#
#  $Id: vol.init,v 1.36.2.10 2010-05-20 05:43:28 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>
#

set show_vol_stats 0
if { $show_vol_stats != 0 } {
	set s [sm gather_stats]
	set save_verbose_flag $verbose_flag
	set verbose_flag 1
	echo Recovery stats:
	pnzstats $s
	set verbose_flag $save_verbose_flag
	unset s
}

# see if init has not been done

set_config_info
set i 0
set err 0
#set skip_raw_init skip_raw_init
set skip_raw_init  ""

if {$volid == 0} {
    # establish default volume id
    set volid [lindex [lindex $smsh_device_list 0] 2]

    verbose volid = $volid

    verbose creating devices
	foreach i $smsh_device_list {
		verbose "device list entry" $i "..."

		set dev  [lindex $i 0]
		set size [lindex $i 1]
		set vol  [lindex $i 2]

		set force_arg force
		set existing 0

		if [ is_set dont_force_reformat ] {
			set force_arg noforce

			set err 0
			catch {sm mount_dev $dev $vol} err
			if {$err == 1} {
			set force_arg noforce
			verbose Result of mount: $err ...
			set existing 1
			} else  {
			set force_arg force
			}
			verbose "dismounting " $dev "..."
			catch {sm dismount_dev $dev} err
		}

		verbose formatting $dev size=$size force=$force_arg
		catch {sm format_dev $dev $size $force_arg} err

		unset force_arg

		verbose "mounting " $dev "..."
		set err 0
		# sm mount_dev $dev $vol
		if [catch { sm mount_dev $dev $vol } err] {
		   echo mount_dev failed:$err
		}
		set vol_list [sm list_volumes $dev]
		verbose "vol list: " $vol_list "..."

		set quota [sm get_device_quota $dev]
		set size_page_align [expr ($size/($page_size/1024))*($page_size/1024)]

		verbose "device quota is " $quota "; size_page_align is" $size_page_align
		assert {expr [lindex $quota 0] == $size_page_align}

		# script bug:
		# fails if we use more than one device in .smshrc device list
		# assert {expr [lindex $quota 1] == 0}

		verbose creating volume $vol size $size on $dev
		if { $existing == 0 } {
			if [catch {sm create_vol $dev $vol $size $skip_raw_init} err] {
			echo $err
			} else {

			assert {expr [string compare [sm has_logical_id_index $vol] TRUE]}
			}
		}

		set quota [sm get_device_quota $dev]
		verbose dev quota: $quota
		assert {expr [lindex $quota 0] == $size_page_align}
		assert {expr [lindex $quota 1] <= $size_page_align}

		set quota [sm get_volume_quota $vol]
		verbose volume quota: $quota
		assert {expr [lindex $quota 0] <= $size_page_align}
		assert {expr [lindex $quota 1] > 0}
		verbose checking that all volumes are present on device
		set vol_list [sm list_volumes $dev]
		verbose volumes on $dev are $vol_list
		assert {expr [llength $vol_list] >= 1}
		assert {expr [string compare [lindex $vol_list 0] $vol.0.0.0:0] == 0}
	}
} else {
    verbose volid = $volid

    verbose Re-mounting devices
    foreach i $smsh_device_list {

		set dev  [lindex $i 0]
		set size [lindex $i 1]
		set vol  [lindex $i 2]

		set err 0
		verbose "mounting " $dev $vol
		catch {sm mount_dev $dev $vol} err
		if {$err == 1} {
			verbose Result of mount: $err ...
		}

		set existing 1

		verbose checking that all volumes are present on device
		set vol_list [sm list_volumes $dev]
		assert {expr [llength $vol_list] >= 1}
		verbose volumes on $dev are $vol_list
		assert {expr [string compare [lindex $vol_list 0] $vol.0.0.0:0] == 0}

		set quota [sm get_device_quota $dev]
		set size_page_align [expr ($size/($page_size/1024))*($page_size/1024)]
		assert {expr [lindex $quota 0] == $size_page_align}
    }
}

# somewhat arbitrary formats:
set id_hdr_width %06d
set id_body_width %08d
unset i err

checkpinstats  "end of vol.init"

addcleanupvars {quota vol_list id_body_width size_page_align size dev
				id_hdr_width vol existing skip_raw_init
				logging show_vol_stats save_script script}

source  $script_dir/sync_commands.tcl

# write the random number seed so that
# when we're trying to reproduce results after
# long runs, we can use the smsh.seed
# write_random smsh.seed
return "leaving vol.init"


