# <std-header style='tcl' orig-src='shore'>
#
#  $Id: file.activity2,v 1.11.4.2 2009/10/27 16:44:48 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
# fork many threads to create, populate, and destroy
# files, sometimes changing them from temp to regular,
# sometimes starting them out regular.
# 
# The point is to get a lot of threads competing for
# the buffer pool with pages moving around from store
# to store.
set recsize 300
set numTests 1
set id_width %08d

proc test {t fileType numObjs numTimes recSize do_change 
    do_scan sleep do_destroy}  {
    global id_width volid 

    for {set j 0} {$j < $numTimes} {incr j}  {
	sm begin_xct
	set fid [sm create_file $volid $fileType]
	verbose "$t **** new file $fid $numObjs $recSize"

	# populate it
	for {set i 0} {$i < $numObjs} {incr i}  {
	    sm create_rec $fid [format $id_width $i] $recSize [format "%0*d" $recSize 2]
	}
	if {$do_change} {
	    verbose "$t **** change property $fid"
	    sm set_store_property $fid regular
	}

	if {$do_scan} {
	    verbose "$t **** beginning scan $fid"
	    set scan [sm scan_file_create $fid t_cc_file]
	    set pin [sm scan_file_next $scan 0]
	    while {$pin != "NULL"}  {
		    set r [sm read_rec [sm pin_rid $pin] 0 0]
		    set pin [sm scan_file_next $scan 0]
	    }
	    sm scan_file_destroy $scan
	}
	if {$sleep > 0} {
	    sm sleep $sleep
	}
	if {$do_destroy} {
	    verbose "$t **** begin destroy fid=$fid"
	    sm destroy_file $fid
	    sm commit_xct
	    verbose "$t **** after destroy fid=$fid"
	}
    }
}


source $script_dir/vol.init
clearstats

# fileType numObjs numTimes recSize do_change do_scan sleep do_destroy
set t1 [fork_thread test t1 "tmp" 1000 4 $recsize 1 0 10 1]
set t2 [fork_thread test t2 "tmp" 8000 4 $recsize 1 1 10 1]
set t3 [fork_thread test t3 "tmp" 100  3 $recsize 1 0 0  1]
set t4 [fork_thread test t4 "tmp" 150  8 $recsize 0 0 1  1]

set t5 [fork_thread test t5 "regular" 1000 4 $recsize 0 0 10 1]
set t6 [fork_thread test t6 "regular" 8000 4 $recsize 0 1 10 1]
set t7 [fork_thread test t7 "regular" 100  3 $recsize 0 0 0  1]
set t8 [fork_thread test t8 "regular" 150  8 $recsize 0 0 1  1]

join_thread $t1 $t2 $t3 $t4 $t5 $t6 $t7 $t8

unset t1 t2 t3 t4 t5 t6 t7 t8 recsize numTests id_width

