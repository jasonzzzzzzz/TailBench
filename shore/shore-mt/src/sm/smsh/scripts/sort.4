# <std-header style='tcl' orig-src='shore'>
#
#  $Id: sort.4,v 1.17.2.1 2009/06/23 01:01:46 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#	Test sort on integers and floats -- this is called by sort.4
#    This assumed that $ktype and $nrec  are set by calling script
#

source $script_dir/vol.init

set runsize 8
#set nrec 2000
set nrec 500

# hdr, body work with both sorts (old, new)
# body does not work with spatial key type 
# hdr does not work with blarge key type 
# old sort might not work with blarge -- it'll run out of space on disk
# set wherelist { hdr body }
set wherelist { body }

# distinct, normal work with both sorts (old, new)
# set dupslist { distinct normal }
set dupslist { distinct }

# b*1000 doesn't appear to work correctly with old sort
# spatial keytype is hard to verify with old sort
# blarge keytype cannot be used with hdr
# set typelist { u1 u2 u4 u8 i1 i2 i4 i8 f4 f8 b1  b*1000 spatial blarge}
# set typelist { u1 u2 u4 i1 i2 i4 f4 f8 b1 }
set typelist { u1 u2 u4 u8 i1 i2 i4 i8 f4 f8 b1 }

set max_patterns 200
# create a string pattern to fill up the body or hdr (wherever the
# key is NOT
set pattern_block ".123456789"


#
# OLD sort does not work for variable-length keys, since
# the key lengths then need to be stored with each key
# set typelist { b*1000 } 
#
set wherelen [llength $wherelist]
for {set w 0} {$w < $wherelen} {incr w} {
    set where [lindex $wherelist $w] 

    set dupslen [llength $dupslist]
    for {set d 0} {$d < $dupslen} {incr d} {
	set dups [lindex $dupslist $d] 

	set pattern ""
	if { $where == "body" } {
	    # key will be in body, pattern will go into hdr
	    set max_patterns 10
	} 
	# else key will be in hdr, pattern will to into body
	for {set i 0} {$i < $max_patterns} {incr i} {
	    set pattern $pattern$pattern_block
	    #verbose $pattern
	}

	set typelen [llength $typelist]
	for {set k 0} {$k < $typelen} {incr k} {
	    set ktype [lindex $typelist $k] 
	    verbose "---- testing -- key type $ktype, where $where, dups $dups"

	    source $script_dir/sort.4a
	}
    }
}



unset nrec max_patterns pattern pattern_block 
unset hdrtype bodytype runsize 
unset wherelist where w wherelen
unset dupslist dups d	dupslen
unset typelist ktype k typelen

