# <std-header style='tcl' orig-src='shore'>
#
#  $Id: write.perf,v 1.15.2.1 2009/10/08 20:52:36 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#        Time writing 
#   Parameters: 
#                   size of objects written 
#                (write size== whole object)
#                logging on or off
#
#  The first 10 % of the objects are hot. 
#
#
# NB: Not to be run alone. It is run by write.perf.restart or all.perf
#
# NB: the first time you run this on a new volume, you will get some 
# multiple of 100 objects created; the transaction creating the last 100
# will run out of disk space and abort.  Thereafter, you must set
# the value of fid" to indicate that the file already exists.
#
#

if [is_set STARTOVER] {
    set fid 0
        set volid 0
} else {
    set dont_force_reformat 1
    set fid s(1.4)
    set volid 1
}

source $script_dir/vol.init


# set objsize [expr {8192 * 5}]
set objsize 7000

#ignored for now
set logging 0

set config [sm config_info]

if {$volid == 0} {
    foreach i $smsh_device_list {
        set dev  [lindex $i 0]
        set size [lindex $i 1]
        set vol  [lindex $i 2]

        sm mount_dev $dev $vol

        set vol_list [sm list_volumes $dev]
        if { [llength $vol_list] == 0 } {
            set quota [sm get_device_quota $dev]
            echo creating volume $vol size $size on $dev
            sm create_vol $dev $vol $size
        }

        set quota [sm get_device_quota $dev]
        set quota [sm get_volume_quota $vol]

        set vol_list [sm list_volumes $dev]
        assert {[expr [llength $vol_list] == 1]}
        assert {[expr [string compare [lindex $vol_list 0] $vol.0.0.0:0] == 0]}
    }
}
if {$volid == 0} {
    set volid [lindex [lindex $smsh_device_list 0] 2]
}

echo mounted everything....

set volsize [lindex [sm get_volume_quota $volid] 0]
set used [lindex [sm get_volume_quota $volid] 1]
set volsize [expr {$volsize - $used} ]
set objksize [expr {$objsize / 1024} ]
set nobjs [expr {$volsize / $objksize} ]
unset objksize

set hdr "" 
set id_body_width zvec%d
set body [format $id_body_width $objsize]

# 
# create a huge file
#
sm begin_xct
echo "should we create a file? fid=" $fid
    if {$fid==0} {
        set fid [sm create_file $volid ]
        echo fid=$fid
        sm commit_xct

        sm begin_xct
        echo creating $nobjs objects of size $objsize 
        set total 0
        for {set i 0} {$i < $nobjs} {incr i} {
            set r($total) [sm create_rec $fid $hdr $objsize $body]
            if { $i == 100 } {
                # echo committing $i for a total of $total
                sm commit_xct
                set $nobjs [expr { $nobjs - $i }]
                # echo $nobjs left to do ... 
                set i 0
                # echo sm begin_xct
                sm begin_xct
            }
            incr total
        }
        echo done creating...
    } else { 
        # have to scan to set up r($i)
        echo scanning $fid ....
        set scan [sm scan_file_create $fid t_cc_record]
        echo returns scan= $scan
        set pin [sm scan_file_next $scan 0]
        echo returns pin= $pin
        set i 0
        while {$pin != "NULL"} {
            echo pin = $pin scan = $scan
            set r($i) [sm pin_rid $pin]
            # don't ruin scan context
            # sm pin_unpin $pin
            set pin [sm scan_file_next $scan 0]
            set i [expr {$i+1} ]
        }
        sm scan_file_destroy $scan
        echo file $fid contains $i objects
    }
#   clear the buffer pool, invalidate 
    sm force_buffers true
sm commit_xct

set nobjs 1000
set hot   [expr $nobjs / 10]
set tbytes 0

proc dohot { i } {
    global tbytes
    global hot
    global r
    global body
    global objsize

    if { [expr {$i % 2}] == 0 } {
        set j [random $hot]
        sm update_rec $r($j) 0 $body
        incr tbytes $objsize
    }
}

echo "doing wtime..."

#   clear the buffer pool, invalidate 
sm force_buffers true

set dummy [sm gather_stats reset]
set wtime [ time {
        set niterations 20
        sm begin_xct
                for {set k 0} {$k < $niterations} {incr k} {
                    for {set i 0} {$i < $nobjs} {incr i} {
                            sm update_rec $r($i) 0 $body
                            incr tbytes $objsize
                            dohot $i
                    }
                }
        sm force_buffers true
        sm commit_xct
} 1 ]
echo

echo WROTE $nobjs RECS, $hot HOT RECS, forced buffers: 
pstats
set dummy [sm gather_stats reset]

echo 
echo total write time = $wtime
set sec [lindex $wtime 0]
echo [expr {$tbytes / $sec}] bytes per second
pstats

echo Running $script_dir/destroy.perf
source $script_dir/destroy.perf
