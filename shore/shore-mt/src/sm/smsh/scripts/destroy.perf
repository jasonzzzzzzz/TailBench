# <std-header style='tcl' orig-src='shore'>
#
#  $Id: destroy.perf,v 1.7 2006/06/01 17:09:42 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#   Time destroying objects in a file 
#   ASSUMES FILE IS ALREADY THERE -- this is
#   meant to be run *after* write.perf
#
#   Parameters: 
#   	        size of objects written 
#		logging on or off
#

# source $script_dir/vol.init

set objsize [expr {8192 * 50}]

#ignored for now
set logging 0

set config [sm config_info]

set volsize [lindex [sm get_volume_quota $volid] 0]
set used [lindex [sm get_volume_quota $volid] 1]
set volsize [expr {$volsize - $used} ]
set objksize [expr {$objsize / 1024} ]
set nobjs [expr {$volsize / $objksize} ]
unset objksize

set hdr "" 
set id_body_width zvec%d
set body [format $id_body_width $objsize]

set fid s(2.4)

set nobjs 200
set tbytes 0

set dummy [sm gather_stats reset]
set wtime [ time {
	sm begin_xct
		for {set i 0} {$i < $nobjs} {incr i} {
			sm destroy_rec $r($i) 
			incr tbytes $objsize
		}
	sm commit_xct
} 1 ]
echo

sm force_buffers false
echo DESTROYS $nobjs RECS, $hot HOT RECS: 
pstats
set dummy [sm gather_stats reset]

sm begin_xct
sm force_buffers true
sm commit_xct

echo 
echo total destroy time = $wtime
set sec [lindex $wtime 0]
echo [expr {$tbytes / $sec}] bytes per second
pstats

