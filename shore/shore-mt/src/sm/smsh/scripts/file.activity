# <std-header style='tcl' orig-src='shore'>
#
#  $Id: file.activity,v 1.12.2.2 2009/10/13 22:10:47 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

# set fileType to tmp or regular
# set logging to yes or no here AND in .shoreconfig
set recsize 300

# force lots of logging activity:
set fileType regular
set logging yes
set numTests 1
set id_width %08d

proc test {fileType numObjs numTimes recSize}  {
	global id_width volid buffer 

	sm begin_xct
	for {set j 0} {$j < $numTimes} {incr j}  {
		set fid [sm create_file $volid $fileType]
		verbose "**** new file $fid $numObjs $recSize"
		for {set i 0} {$i < $numObjs} {incr i}  {
		# sm create_rec $fid [format $id_width $i] $recSize $buffer
	sm create_rec $fid [format $id_width $i] $recSize [format "%0*d" $recSize 2]
		}
	   #  sm dump_buffers
		# sm dump_threads
		verbose "**** change property $fid"
		sm set_store_property $fid regular

		verbose "**** beginning scan $fid"
		set scan [sm scan_file_create $fid t_cc_file]
		set pin [sm scan_file_next $scan 0]
		while {$pin != "NULL"}  {
			set r [sm read_rec [sm pin_rid $pin] 0 0]
			set pin [sm scan_file_next $scan 0]
		}
		sm scan_file_destroy $scan
		verbose sm scan_file_destroy $scan fid=$fid

	
		verbose "**** begin destroy fid=$fid"
		sm destroy_file $fid
		verbose "**** after destroy fid=$fid"
	}
	sm commit_xct
}

# make a 64K buffer
set buffer ""
set c 1
for {set i 48} {$i < 112} {incr i}  {
	set c [format "%c" $i]
	set buffer "$buffer$c"
}
for {set i 0} {$i < 10} {incr i}  {
	set buffer "$buffer$buffer"
}

verbose "********************************"
verbose "** fileType: $fileType, logging: $logging, numTest: $numTests"
verbose "********************************"

source $script_dir/vol.init
clearstats

# set testTime [time {test $fileType} $numTests]
set t1 [fork_thread test $fileType 1000 4 $recsize]
set t2 [fork_thread test $fileType 8000 4 $recsize]
set t3 [fork_thread test $fileType 100 3 $recsize]
set t4 [fork_thread test $fileType 150 8 $recsize]
join_thread $t1 $t2 $t3 $t4
# join_thread $t1 


verbose
# verbose testTime=$testTime
verbose ********************************
verbose STAT NUMBERS ARE FOR $numTests RUNS.
verbose ********************************
set n [sm gather_stats]
verbose [pnzstats $n]
unset n
verbose
verbose

unset buffer logging c recsize fileType numTests id_width
unset t1 t2 t3 t4

