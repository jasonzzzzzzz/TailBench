# <std-header style='tcl' orig-src='shore'>
#
#  $Id: createsmall.1,v 1.13.4.1 2010/01/12 02:02:00 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#	Test InsertRecord, DeleteRecord and ReadRecord
#
source $script_dir/vol.init
if {$volid == 0} {
    set volid 10
    sm create_vol $volid force
    set volid [sm init_vol_logical_id $volid 100]
    sm mount
}

set num_rec 50 

set s [format data 1]

###############################################
#   insert num_rec records
#
sm begin_xct
set fid [sm create_file $volid regular]
set rid(0) $null_rid
verbose creating $num_rec 
set pattern 123456789.123456789.123456789.123456
for {set i 1} {$i <= $num_rec} {incr i} {
    verbose $i
    set rid($i) [
	sm create_rec $fid "hdr" 10 $pattern
    ]
}
verbose done creating $num_rec records
sm commit_xct

###############################################
#   read inserted records
#
set id_width %06d

sm begin_xct
for {set i 1} {$i <= $num_rec} {incr i} {
    set r [sm read_rec $rid($i) 0 0]
    set id [format $id_width $i]
    verbose i=$i id=$id r=$r
    set hdr [lindex $r 2]
    set body [lindex $r 4]
    if {[expr [string compare $body $pattern]] == 0} {
    } else {
	echo assertion failed
	echo hdr=$hdr
	echo body=$body
	echo pattern=$pattern
    }
    assert {expr [string compare $body $pattern] == 0}
}

sm commit_xct

dstats $volid

sm begin_xct
sm destroy_file $fid
sm commit_xct

dstats $volid

unset id fid hdr num_rec
unset rid i body r s id_width
unset pattern

